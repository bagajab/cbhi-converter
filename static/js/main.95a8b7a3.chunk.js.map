{"version":3,"sources":["ConvertedResult.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["rootStyle","display","justifyContent","rowStyle","margin","ConvertedResult","props","membershipNumber","formattedMembershipNumber","split","payingIndigentOld","zonalCodeOld","woredaCodeOld","kebeleCodeOld","householdCodeOld","beneficiaryCodeOld","regionalCode","woredaCode","kebeleCode","householdCode","beneficiaryCode","payingIndigent","householdNumber","strokeColor","style","className","id","relations","targetId","targetAnchor","sourceAnchor","strokeDasharray","App","handleMembershipumber","event","value","target","toUpperCase","length","zonalCode","setState","validMembershipNumber","formattedPayingIndigent","state","this","htmlFor","type","onChange","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.95a8b7a3.chunk.js","sourcesContent":["import { ArcherContainer, ArcherElement } from 'react-archer';\n\nconst rootStyle = { display: 'flex', justifyContent: 'center' };\nconst rowStyle = { margin: '200px 20px', display: 'flex', }\n\nconst ConvertedResult = (props) => {\n  const { membershipNumber, formattedMembershipNumber } = props;\n  const [payingIndigentOld, zonalCodeOld, woredaCodeOld, kebeleCodeOld, householdCodeOld, beneficiaryCodeOld ] = membershipNumber.split('/');\n  const [regionalCode, woredaCode, kebeleCode, householdCode, beneficiaryCode ] = formattedMembershipNumber.split('/');\n  const [payingIndigent, householdNumber] = householdCode.split('-');\n\n\n  return (\n    <div >\n      <ArcherContainer strokeColor=\"red\">\n        <div style={rootStyle} className=\"mt-4\">\n          <ArcherElement\n            id=\"payingIndigentOld\"\n            relations={[\n              {\n                targetId: 'payingIndigentNew',\n                targetAnchor: 'top',\n                sourceAnchor: 'bottom',\n                style: { strokeDasharray: '5,5' },\n              },\n            ]}\n          >\n            <div className=\"h3\">{payingIndigentOld}</div>\n          </ArcherElement>\n          <div className=\"h3\">/</div>\n           <ArcherElement\n            id=\"zonalCodeOld\"\n            relations={[\n              {\n                targetId: 'regionCodeNew',\n                targetAnchor: 'top',\n                sourceAnchor: 'bottom',\n                style: { strokeDasharray: '5,5', strokeColor: 'blue' },\n              },\n            ]}\n          >\n            <div className=\"h3\">{zonalCodeOld}</div>\n          </ArcherElement>\n          <div className=\"h3\">/</div>\n           <ArcherElement\n            id=\"woredaCodeOld\"\n            relations={[\n              {\n                targetId: 'woredaCodeNew',\n                targetAnchor: 'top',\n                sourceAnchor: 'bottom',\n                style: { strokeDasharray: '5,5', strokeColor: 'black' },\n              },\n            ]}\n          >\n            <div className=\"h3\">{woredaCodeOld}</div>\n          </ArcherElement>\n          <div className=\"h3\">/</div>\n           <ArcherElement\n            id=\"kebeleCodeOld\"\n            relations={[\n              {\n                targetId: 'kebeleCodeNew',\n                targetAnchor: 'top',\n                sourceAnchor: 'bottom',\n                style: { strokeDasharray: '5,5', strokeColor: 'green' },\n              },\n            ]}\n          >\n            <div className=\"h3\">{kebeleCodeOld}</div>\n          </ArcherElement>\n          <div className=\"h3\">/</div>\n           <ArcherElement\n            id=\"householdCodeOld\"\n            relations={[\n              {\n                targetId: 'householdCodeNew',\n                targetAnchor: 'top',\n                sourceAnchor: 'bottom',\n                style: { strokeDasharray: '5,5', strokeColor: '#FF1493' },\n              },\n            ]}\n          >\n            <div className=\"h3\">{householdCodeOld}</div>\n          </ArcherElement>\n          <div className=\"h3\">/</div>\n           <ArcherElement\n            id=\"beneficiaryCodeOld\"\n            relations={[\n              {\n                targetId: 'beneficiaryCodeNew',\n                targetAnchor: 'top',\n                sourceAnchor: 'bottom',\n                style: { strokeDasharray: '5,5', strokeColor: '#228B22' },\n              },\n            ]}\n          >\n            <div className=\"h3\">{beneficiaryCodeOld}</div>\n          </ArcherElement>\n        </div>\n\n        <div style={rowStyle}>\n        \n          <ArcherElement id=\"regionCodeNew\"><div className=\"h3\">{regionalCode}</div></ArcherElement>\n          <div className=\"h3\">/</div>\n\n          <ArcherElement id=\"woredaCodeNew\"><div className=\"h3\">{woredaCode}</div></ArcherElement>\n          <div className=\"h3\">/</div>\n\n          <ArcherElement id=\"kebeleCodeNew\"><div className=\"h3\">{kebeleCode}</div></ArcherElement>\n          <div className=\"h3\">/</div>\n\n          <ArcherElement id=\"payingIndigentNew\"><div className=\"h3\">{payingIndigent}-</div></ArcherElement>\n          <ArcherElement id=\"householdCodeNew\"><div className=\"h3\">{householdNumber}</div></ArcherElement>\n          <div className=\"h3\">/</div>\n\n          <ArcherElement id=\"beneficiaryCodeNew\"><div className=\"h3\">{beneficiaryCode}</div></ArcherElement>\n        </div>\n      </ArcherContainer>\n    </div>\n  );\n}\n\nexport default ConvertedResult;","import React, { Component } from 'react'\nimport ConvertedResult from './ConvertedResult'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { membershipNumber: \"K/13/02/05/56342/0\", validMembershipNumber: false, formattedMembershipNumber: \"\" };\n  }\n\n  handleMembershipumber = (event) => {\n    let value = event.target.value.toUpperCase();\n    if (value.length !== 19 || value.split('/').length !== 6) {\n      this.setState({ validMembershipNumber: false, membershipNumber: event.target.value, formattedMembershipNumber: \"\"})\n      return;\n    }\n    const [payingIndigent, zonalCode, woredaCode, kebeleCode, householdCode, beneficiaryCode ] = value.split('/');\n    if (payingIndigent.length !== 1 || !(payingIndigent === 'K' || payingIndigent === 'H') || zonalCode.length !== 2 || woredaCode.length !== 2 || kebeleCode.length !== 2 || householdCode.length !== 5 || beneficiaryCode.length !== 2 ) {\n      this.setState({ validMembershipNumber: false, membershipNumber: event.target.value, formattedMembershipNumber: \"\"})\n      return;\n    }\n    const formattedPayingIndigent = payingIndigent === 'K' ? 'P' : 'I';\n    const formattedMembershipNumber = `04/${woredaCode}/${kebeleCode}/${formattedPayingIndigent}-0${householdCode}/${beneficiaryCode}`\n    this.setState({ validMembershipNumber: true, membershipNumber: event.target.value, formattedMembershipNumber })\n  }\n\n  render() {\n    const { validMembershipNumber, membershipNumber, formattedMembershipNumber } = this.state;\n    \n    return (\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\" col-sm-12 col-md-6 col-lg-6\">\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"membershipNumber\">CBHI-ID / IFH </label>\n                <input type=\"text\" className=\"form-control\" id=\"membershipNumber\" value={membershipNumber} onChange={this.handleMembershipumber} />\n                <small id=\"membershipNumberHelpBlock\" className=\"form-text text-muted\">\n                  CBHI-ID/FH should follow <strong>K/13/02/05/56342/00</strong> format.\n                </small>\n              </div>\n            </form>\n          </div>\n          <div className=\" col-sm-12 col-md-6 col-lg-6 text-center\">\n            {validMembershipNumber && <ConvertedResult membershipNumber={membershipNumber} formattedMembershipNumber={formattedMembershipNumber} />}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}